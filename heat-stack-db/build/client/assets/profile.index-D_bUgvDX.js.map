{"version":3,"file":"profile.index-D_bUgvDX.js","sources":["../../../app/routes/settings+/profile.index.tsx"],"sourcesContent":["import { getFormProps, getInputProps, useForm } from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport { invariantResponse } from '@epic-web/invariant'\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport {\n\tjson,\n\ttype LoaderFunctionArgs,\n\ttype ActionFunctionArgs,\n} from '@remix-run/node'\nimport { Link, useFetcher, useLoaderData } from '@remix-run/react'\nimport { z } from 'zod'\nimport { ErrorList, Field } from '#app/components/forms.tsx'\nimport { Button } from '#app/components/ui/button.tsx'\nimport { Icon } from '#app/components/ui/icon.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport { requireUserId, sessionKey } from '#app/utils/auth.server.ts'\nimport { prisma } from '#app/utils/db.server.ts'\nimport { getUserImgSrc, useDoubleCheck } from '#app/utils/misc.tsx'\nimport { authSessionStorage } from '#app/utils/session.server.ts'\nimport { redirectWithToast } from '#app/utils/toast.server.ts'\nimport { NameSchema, UsernameSchema } from '#app/utils/user-validation.ts'\nimport { twoFAVerificationType } from './profile.two-factor.tsx'\n\nexport const handle: SEOHandle = {\n\tgetSitemapEntries: () => null,\n}\n\nconst ProfileFormSchema = z.object({\n\tname: NameSchema.optional(),\n\tusername: UsernameSchema,\n})\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n\tconst userId = await requireUserId(request)\n\tconst user = await prisma.user.findUniqueOrThrow({\n\t\twhere: { id: userId },\n\t\tselect: {\n\t\t\tid: true,\n\t\t\tname: true,\n\t\t\tusername: true,\n\t\t\temail: true,\n\t\t\timage: {\n\t\t\t\tselect: { id: true },\n\t\t\t},\n\t\t\t_count: {\n\t\t\t\tselect: {\n\t\t\t\t\tsessions: {\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\texpirationDate: { gt: new Date() },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\n\tconst twoFactorVerification = await prisma.verification.findUnique({\n\t\tselect: { id: true },\n\t\twhere: { target_type: { type: twoFAVerificationType, target: userId } },\n\t})\n\n\tconst password = await prisma.password.findUnique({\n\t\tselect: { userId: true },\n\t\twhere: { userId },\n\t})\n\n\treturn json({\n\t\tuser,\n\t\thasPassword: Boolean(password),\n\t\tisTwoFactorEnabled: Boolean(twoFactorVerification),\n\t})\n}\n\ntype ProfileActionArgs = {\n\trequest: Request\n\tuserId: string\n\tformData: FormData\n}\nconst profileUpdateActionIntent = 'update-profile'\nconst signOutOfSessionsActionIntent = 'sign-out-of-sessions'\nconst deleteDataActionIntent = 'delete-data'\n\nexport async function action({ request }: ActionFunctionArgs) {\n\tconst userId = await requireUserId(request)\n\tconst formData = await request.formData()\n\tconst intent = formData.get('intent')\n\tswitch (intent) {\n\t\tcase profileUpdateActionIntent: {\n\t\t\treturn profileUpdateAction({ request, userId, formData })\n\t\t}\n\t\tcase signOutOfSessionsActionIntent: {\n\t\t\treturn signOutOfSessionsAction({ request, userId, formData })\n\t\t}\n\t\tcase deleteDataActionIntent: {\n\t\t\treturn deleteDataAction({ request, userId, formData })\n\t\t}\n\t\tdefault: {\n\t\t\tthrow new Response(`Invalid intent \"${intent}\"`, { status: 400 })\n\t\t}\n\t}\n}\n\nexport default function EditUserProfile() {\n\tconst data = useLoaderData<typeof loader>()\n\n\treturn (\n\t\t<div className=\"flex flex-col gap-12\">\n\t\t\t<div className=\"flex justify-center\">\n\t\t\t\t<div className=\"relative h-52 w-52\">\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={getUserImgSrc(data.user.image?.id)}\n\t\t\t\t\t\talt={data.user.username}\n\t\t\t\t\t\tclassName=\"h-full w-full rounded-full object-cover\"\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tasChild\n\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\tclassName=\"absolute -right-3 top-3 flex h-10 w-10 items-center justify-center rounded-full p-0\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\tpreventScrollReset\n\t\t\t\t\t\t\tto=\"photo\"\n\t\t\t\t\t\t\ttitle=\"Change profile photo\"\n\t\t\t\t\t\t\taria-label=\"Change profile photo\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Icon name=\"camera\" className=\"h-4 w-4\" />\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<UpdateProfile />\n\n\t\t\t<div className=\"col-span-6 my-6 h-1 border-b-[1.5px] border-foreground\" />\n\t\t\t<div className=\"col-span-full flex flex-col gap-6\">\n\t\t\t\t<div>\n\t\t\t\t\t<Link to=\"change-email\">\n\t\t\t\t\t\t<Icon name=\"envelope-closed\">\n\t\t\t\t\t\t\tChange email from {data.user.email}\n\t\t\t\t\t\t</Icon>\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Link to=\"two-factor\">\n\t\t\t\t\t\t{data.isTwoFactorEnabled ? (\n\t\t\t\t\t\t\t<Icon name=\"lock-closed\">2FA is enabled</Icon>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Icon name=\"lock-open-1\">Enable 2FA</Icon>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Link to={data.hasPassword ? 'password' : 'password/create'}>\n\t\t\t\t\t\t<Icon name=\"dots-horizontal\">\n\t\t\t\t\t\t\t{data.hasPassword ? 'Change Password' : 'Create a Password'}\n\t\t\t\t\t\t</Icon>\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Link to=\"connections\">\n\t\t\t\t\t\t<Icon name=\"link-2\">Manage connections</Icon>\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Link\n\t\t\t\t\t\treloadDocument\n\t\t\t\t\t\tdownload=\"my-epic-notes-data.json\"\n\t\t\t\t\t\tto=\"/resources/download-user-data\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Icon name=\"download\">Download your data</Icon>\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<SignOutOfSessions />\n\t\t\t\t<DeleteData />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nasync function profileUpdateAction({ userId, formData }: ProfileActionArgs) {\n\tconst submission = await parseWithZod(formData, {\n\t\tasync: true,\n\t\tschema: ProfileFormSchema.superRefine(async ({ username }, ctx) => {\n\t\t\tconst existingUsername = await prisma.user.findUnique({\n\t\t\t\twhere: { username },\n\t\t\t\tselect: { id: true },\n\t\t\t})\n\t\t\tif (existingUsername && existingUsername.id !== userId) {\n\t\t\t\tctx.addIssue({\n\t\t\t\t\tpath: ['username'],\n\t\t\t\t\tcode: z.ZodIssueCode.custom,\n\t\t\t\t\tmessage: 'A user already exists with this username',\n\t\t\t\t})\n\t\t\t}\n\t\t}),\n\t})\n\tif (submission.status !== 'success') {\n\t\treturn json(\n\t\t\t{ result: submission.reply() },\n\t\t\t{ status: submission.status === 'error' ? 400 : 200 },\n\t\t)\n\t}\n\n\tconst data = submission.value\n\n\tawait prisma.user.update({\n\t\tselect: { username: true },\n\t\twhere: { id: userId },\n\t\tdata: {\n\t\t\tname: data.name,\n\t\t\tusername: data.username,\n\t\t},\n\t})\n\n\treturn json({\n\t\tresult: submission.reply(),\n\t})\n}\n\nfunction UpdateProfile() {\n\tconst data = useLoaderData<typeof loader>()\n\n\tconst fetcher = useFetcher<typeof profileUpdateAction>()\n\n\tconst [form, fields] = useForm({\n\t\tid: 'edit-profile',\n\t\tconstraint: getZodConstraint(ProfileFormSchema),\n\t\tlastResult: fetcher.data?.result,\n\t\tonValidate({ formData }) {\n\t\t\treturn parseWithZod(formData, { schema: ProfileFormSchema })\n\t\t},\n\t\tdefaultValue: {\n\t\t\tusername: data.user.username,\n\t\t\tname: data.user.name,\n\t\t},\n\t})\n\n\treturn (\n\t\t<fetcher.Form method=\"POST\" {...getFormProps(form)}>\n\t\t\t<div className=\"grid grid-cols-6 gap-x-10\">\n\t\t\t\t<Field\n\t\t\t\t\tclassName=\"col-span-3\"\n\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\thtmlFor: fields.username.id,\n\t\t\t\t\t\tchildren: 'Username',\n\t\t\t\t\t}}\n\t\t\t\t\tinputProps={getInputProps(fields.username, { type: 'text' })}\n\t\t\t\t\terrors={fields.username.errors}\n\t\t\t\t/>\n\t\t\t\t<Field\n\t\t\t\t\tclassName=\"col-span-3\"\n\t\t\t\t\tlabelProps={{ htmlFor: fields.name.id, children: 'Name' }}\n\t\t\t\t\tinputProps={getInputProps(fields.name, { type: 'text' })}\n\t\t\t\t\terrors={fields.name.errors}\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t<ErrorList errors={form.errors} id={form.errorId} />\n\n\t\t\t<div className=\"mt-8 flex justify-center\">\n\t\t\t\t<StatusButton\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tsize=\"wide\"\n\t\t\t\t\tname=\"intent\"\n\t\t\t\t\tvalue={profileUpdateActionIntent}\n\t\t\t\t\tstatus={fetcher.state !== 'idle' ? 'pending' : form.status ?? 'idle'}\n\t\t\t\t>\n\t\t\t\t\tSave changes\n\t\t\t\t</StatusButton>\n\t\t\t</div>\n\t\t</fetcher.Form>\n\t)\n}\n\nasync function signOutOfSessionsAction({ request, userId }: ProfileActionArgs) {\n\tconst authSession = await authSessionStorage.getSession(\n\t\trequest.headers.get('cookie'),\n\t)\n\tconst sessionId = authSession.get(sessionKey)\n\tinvariantResponse(\n\t\tsessionId,\n\t\t'You must be authenticated to sign out of other sessions',\n\t)\n\tawait prisma.session.deleteMany({\n\t\twhere: {\n\t\t\tuserId,\n\t\t\tid: { not: sessionId },\n\t\t},\n\t})\n\treturn json({ status: 'success' } as const)\n}\n\nfunction SignOutOfSessions() {\n\tconst data = useLoaderData<typeof loader>()\n\tconst dc = useDoubleCheck()\n\n\tconst fetcher = useFetcher<typeof signOutOfSessionsAction>()\n\tconst otherSessionsCount = data.user._count.sessions - 1\n\treturn (\n\t\t<div>\n\t\t\t{otherSessionsCount ? (\n\t\t\t\t<fetcher.Form method=\"POST\">\n\t\t\t\t\t<StatusButton\n\t\t\t\t\t\t{...dc.getButtonProps({\n\t\t\t\t\t\t\ttype: 'submit',\n\t\t\t\t\t\t\tname: 'intent',\n\t\t\t\t\t\t\tvalue: signOutOfSessionsActionIntent,\n\t\t\t\t\t\t})}\n\t\t\t\t\t\tvariant={dc.doubleCheck ? 'destructive' : 'default'}\n\t\t\t\t\t\tstatus={\n\t\t\t\t\t\t\tfetcher.state !== 'idle'\n\t\t\t\t\t\t\t\t? 'pending'\n\t\t\t\t\t\t\t\t: fetcher.data?.status ?? 'idle'\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Icon name=\"avatar\">\n\t\t\t\t\t\t\t{dc.doubleCheck\n\t\t\t\t\t\t\t\t? `Are you sure?`\n\t\t\t\t\t\t\t\t: `Sign out of ${otherSessionsCount} other sessions`}\n\t\t\t\t\t\t</Icon>\n\t\t\t\t\t</StatusButton>\n\t\t\t\t</fetcher.Form>\n\t\t\t) : (\n\t\t\t\t<Icon name=\"avatar\">This is your only session</Icon>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n\nasync function deleteDataAction({ userId }: ProfileActionArgs) {\n\tawait prisma.user.delete({ where: { id: userId } })\n\treturn redirectWithToast('/', {\n\t\ttype: 'success',\n\t\ttitle: 'Data Deleted',\n\t\tdescription: 'All of your data has been deleted',\n\t})\n}\n\nfunction DeleteData() {\n\tconst dc = useDoubleCheck()\n\n\tconst fetcher = useFetcher<typeof deleteDataAction>()\n\treturn (\n\t\t<div>\n\t\t\t<fetcher.Form method=\"POST\">\n\t\t\t\t<StatusButton\n\t\t\t\t\t{...dc.getButtonProps({\n\t\t\t\t\t\ttype: 'submit',\n\t\t\t\t\t\tname: 'intent',\n\t\t\t\t\t\tvalue: deleteDataActionIntent,\n\t\t\t\t\t})}\n\t\t\t\t\tvariant={dc.doubleCheck ? 'destructive' : 'default'}\n\t\t\t\t\tstatus={fetcher.state !== 'idle' ? 'pending' : 'idle'}\n\t\t\t\t>\n\t\t\t\t\t<Icon name=\"trash\">\n\t\t\t\t\t\t{dc.doubleCheck ? `Are you sure?` : `Delete all your data`}\n\t\t\t\t\t</Icon>\n\t\t\t\t</StatusButton>\n\t\t\t</fetcher.Form>\n\t\t</div>\n\t)\n}\n"],"names":["handle","getSitemapEntries","ProfileFormSchema","z","object","name","NameSchema","optional","username","UsernameSchema","profileUpdateActionIntent","signOutOfSessionsActionIntent","deleteDataActionIntent","EditUserProfile","data","useLoaderData","jsxs","className","children","jsx","src","getUserImgSrc","user","image","id","alt","Button","asChild","variant","Link","preventScrollReset","to","title","Icon","UpdateProfile","email","isTwoFactorEnabled","hasPassword","reloadDocument","download","SignOutOfSessions","DeleteData","fetcher","useFetcher","form","fields","useForm","constraint","getZodConstraint","lastResult","result","onValidate","formData","parseWithZod","schema","defaultValue","Form","method","getFormProps","Field","labelProps","htmlFor","inputProps","getInputProps","type","errors","ErrorList","errorId","StatusButton","size","value","status","state","dc","useDoubleCheck","otherSessionsCount","_count","sessions","getButtonProps","doubleCheck"],"mappings":"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"}