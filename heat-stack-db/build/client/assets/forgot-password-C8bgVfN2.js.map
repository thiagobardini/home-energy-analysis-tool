{"version":3,"file":"forgot-password-C8bgVfN2.js","sources":["../../../app/routes/_auth+/forgot-password.tsx"],"sourcesContent":["import { getFormProps, getInputProps, useForm } from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport * as E from '@react-email/components'\nimport {\n\tjson,\n\tredirect,\n\ttype ActionFunctionArgs,\n\ttype MetaFunction,\n} from '@remix-run/node'\nimport { Link, useFetcher } from '@remix-run/react'\nimport { HoneypotInputs } from 'remix-utils/honeypot/react'\nimport { z } from 'zod'\nimport { GeneralErrorBoundary } from '#app/components/error-boundary.tsx'\nimport { ErrorList, Field } from '#app/components/forms.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport { prisma } from '#app/utils/db.server.ts'\nimport { sendEmail } from '#app/utils/email.server.ts'\nimport { checkHoneypot } from '#app/utils/honeypot.server.ts'\nimport { EmailSchema, UsernameSchema } from '#app/utils/user-validation.ts'\nimport { prepareVerification } from './verify.server.ts'\n\nconst ForgotPasswordSchema = z.object({\n\tusernameOrEmail: z.union([EmailSchema, UsernameSchema]),\n})\n\nexport async function action({ request }: ActionFunctionArgs) {\n\tconst formData = await request.formData()\n\tcheckHoneypot(formData)\n\tconst submission = await parseWithZod(formData, {\n\t\tschema: ForgotPasswordSchema.superRefine(async (data, ctx) => {\n\t\t\tconst user = await prisma.user.findFirst({\n\t\t\t\twhere: {\n\t\t\t\t\tOR: [\n\t\t\t\t\t\t{ email: data.usernameOrEmail },\n\t\t\t\t\t\t{ username: data.usernameOrEmail },\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tselect: { id: true },\n\t\t\t})\n\t\t\tif (!user) {\n\t\t\t\tctx.addIssue({\n\t\t\t\t\tpath: ['usernameOrEmail'],\n\t\t\t\t\tcode: z.ZodIssueCode.custom,\n\t\t\t\t\tmessage: 'No user exists with this username or email',\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t}),\n\t\tasync: true,\n\t})\n\tif (submission.status !== 'success') {\n\t\treturn json(\n\t\t\t{ result: submission.reply() },\n\t\t\t{ status: submission.status === 'error' ? 400 : 200 },\n\t\t)\n\t}\n\tconst { usernameOrEmail } = submission.value\n\n\tconst user = await prisma.user.findFirstOrThrow({\n\t\twhere: { OR: [{ email: usernameOrEmail }, { username: usernameOrEmail }] },\n\t\tselect: { email: true, username: true },\n\t})\n\n\tconst { verifyUrl, redirectTo, otp } = await prepareVerification({\n\t\tperiod: 10 * 60,\n\t\trequest,\n\t\ttype: 'reset-password',\n\t\ttarget: usernameOrEmail,\n\t})\n\n\tconst response = await sendEmail({\n\t\tto: user.email,\n\t\tsubject: `Epic Notes Password Reset`,\n\t\treact: (\n\t\t\t<ForgotPasswordEmail onboardingUrl={verifyUrl.toString()} otp={otp} />\n\t\t),\n\t})\n\n\tif (response.status === 'success') {\n\t\treturn redirect(redirectTo.toString())\n\t} else {\n\t\treturn json(\n\t\t\t{ result: submission.reply({ formErrors: [response.error.message] }) },\n\t\t\t{ status: 500 },\n\t\t)\n\t}\n}\n\nfunction ForgotPasswordEmail({\n\tonboardingUrl,\n\totp,\n}: {\n\tonboardingUrl: string\n\totp: string\n}) {\n\treturn (\n\t\t<E.Html lang=\"en\" dir=\"ltr\">\n\t\t\t<E.Container>\n\t\t\t\t<h1>\n\t\t\t\t\t<E.Text>Epic Notes Password Reset</E.Text>\n\t\t\t\t</h1>\n\t\t\t\t<p>\n\t\t\t\t\t<E.Text>\n\t\t\t\t\t\tHere's your verification code: <strong>{otp}</strong>\n\t\t\t\t\t</E.Text>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t<E.Text>Or click the link:</E.Text>\n\t\t\t\t</p>\n\t\t\t\t<E.Link href={onboardingUrl}>{onboardingUrl}</E.Link>\n\t\t\t</E.Container>\n\t\t</E.Html>\n\t)\n}\n\nexport const meta: MetaFunction = () => {\n\treturn [{ title: 'Password Recovery for Epic Notes' }]\n}\n\nexport default function ForgotPasswordRoute() {\n\tconst forgotPassword = useFetcher<typeof action>()\n\n\tconst [form, fields] = useForm({\n\t\tid: 'forgot-password-form',\n\t\tconstraint: getZodConstraint(ForgotPasswordSchema),\n\t\tlastResult: forgotPassword.data?.result,\n\t\tonValidate({ formData }) {\n\t\t\treturn parseWithZod(formData, { schema: ForgotPasswordSchema })\n\t\t},\n\t\tshouldRevalidate: 'onBlur',\n\t})\n\n\treturn (\n\t\t<div className=\"container pb-32 pt-20\">\n\t\t\t<div className=\"flex flex-col justify-center\">\n\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t<h1 className=\"text-h1\">Forgot Password</h1>\n\t\t\t\t\t<p className=\"mt-3 text-body-md text-muted-foreground\">\n\t\t\t\t\t\tNo worries, we'll send you reset instructions.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"mx-auto mt-16 min-w-full max-w-sm sm:min-w-[368px]\">\n\t\t\t\t\t<forgotPassword.Form method=\"POST\" {...getFormProps(form)}>\n\t\t\t\t\t\t<HoneypotInputs />\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\t\t\t\thtmlFor: fields.usernameOrEmail.id,\n\t\t\t\t\t\t\t\t\tchildren: 'Username or Email',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t\t\tautoFocus: true,\n\t\t\t\t\t\t\t\t\t...getInputProps(fields.usernameOrEmail, { type: 'text' }),\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\terrors={fields.usernameOrEmail.errors}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<ErrorList errors={form.errors} id={form.errorId} />\n\n\t\t\t\t\t\t<div className=\"mt-6\">\n\t\t\t\t\t\t\t<StatusButton\n\t\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t\t\tstatus={\n\t\t\t\t\t\t\t\t\tforgotPassword.state === 'submitting'\n\t\t\t\t\t\t\t\t\t\t? 'pending'\n\t\t\t\t\t\t\t\t\t\t: form.status ?? 'idle'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\tdisabled={forgotPassword.state !== 'idle'}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tRecover password\n\t\t\t\t\t\t\t</StatusButton>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</forgotPassword.Form>\n\t\t\t\t\t<Link\n\t\t\t\t\t\tto=\"/login\"\n\t\t\t\t\t\tclassName=\"mt-11 text-center text-body-sm font-bold\"\n\t\t\t\t\t>\n\t\t\t\t\t\tBack to Login\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport function ErrorBoundary() {\n\treturn <GeneralErrorBoundary />\n}\n"],"names":["ForgotPasswordSchema","z","object","usernameOrEmail","union","EmailSchema","UsernameSchema","meta","title","ForgotPasswordRoute","forgotPassword","useFetcher","form","fields","useForm","id","constraint","getZodConstraint","lastResult","data","result","onValidate","formData","parseWithZod","schema","shouldRevalidate","className","children","jsxs","jsx","Form","method","getFormProps","HoneypotInputs","Field","labelProps","htmlFor","inputProps","autoFocus","getInputProps","type","errors","ErrorList","errorId","StatusButton","status","state","disabled","Link","to","ErrorBoundary","GeneralErrorBoundary"],"mappings":"qwBAqBA,MAAMA,EAAuBC,EAAEC,OAAO,CACrCC,gBAAiBF,EAAEG,MAAM,CAACC,EAAaC,CAAc,CAAC,CACvD,CAAC,EA4FYC,EAAqBA,IAC1B,CAAC,CAAEC,MAAO,kCAAmC,CAAC,EAGtD,SAAwBC,GAAsB,OAC7C,MAAMC,EAAiBC,IAEjB,CAACC,EAAMC,CAAM,EAAIC,EAAQ,CAC9BC,GAAI,uBACJC,WAAYC,EAAiBjB,CAAoB,EACjDkB,YAAYR,EAAAA,EAAeS,OAAfT,YAAAA,EAAqBU,OACjCC,WAAW,CAAEC,SAAAA,CAAS,EAAG,CACxB,OAAOC,EAAaD,EAAU,CAAEE,OAAQxB,CAAqB,CAAC,CAC/D,EACAyB,iBAAkB,QACnB,CAAC,EAED,aACE,MAAI,CAAAC,UAAU,wBACdC,SAACC,EAAA,KAAA,MAAA,CAAIF,UAAU,+BACdC,SAAA,CAACC,EAAA,KAAA,MAAA,CAAIF,UAAU,cACdC,SAAA,CAACE,EAAA,IAAA,KAAA,CAAGH,UAAU,UAAUC,SAAe,iBAAA,CAAA,EACtCE,EAAA,IAAA,IAAA,CAAEH,UAAU,0CAA0CC,SAEvD,gDAAA,CAAA,CAAA,CACD,CAAA,EACAC,EAAA,KAAC,MAAI,CAAAF,UAAU,qDACdC,SAAA,CAACC,EAAAA,KAAAlB,EAAeoB,KAAf,CAAoBC,OAAO,OAAQ,GAAGC,EAAapB,CAAI,EACvDe,SAAA,CAAAE,EAAAA,IAACI,EAAe,CAAA,CAAA,QACf,MACA,CAAAN,SAAAE,EAAA,IAACK,EAAA,CACAC,WAAY,CACXC,QAASvB,EAAOV,gBAAgBY,GAChCY,SAAU,mBACX,EACAU,WAAY,CACXC,UAAW,GACX,GAAGC,EAAc1B,EAAOV,gBAAiB,CAAEqC,KAAM,OAAQ,CAC1D,EACAC,OAAQ5B,EAAOV,gBAAgBsC,OAChC,CACD,CAAA,QACCC,EAAU,CAAAD,OAAQ7B,EAAK6B,OAAQ1B,GAAIH,EAAK+B,OAAS,CAAA,EAElDd,EAAA,IAAC,MAAI,CAAAH,UAAU,OACdC,SAAAE,EAAA,IAACe,EAAA,CACAlB,UAAU,SACVmB,OACCnC,EAAeoC,QAAU,aACtB,UACAlC,EAAKiC,QAAU,OAEnBL,KAAK,SACLO,SAAUrC,EAAeoC,QAAU,OACnCnB,SAAA,mBAED,CACD,CAAA,CAAA,CACD,CAAA,EACAE,EAAA,IAACmB,EAAA,CACAC,GAAG,SACHvB,UAAU,2CACVC,SAAA,eAAA,CAED,CAAA,CACD,CAAA,CAAA,EACD,CACD,CAAA,CAEF,CAEO,SAASuB,GAAgB,CAC/B,aAAQC,EAAqB,CAAA,CAAA,CAC9B"}