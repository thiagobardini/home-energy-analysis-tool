{"version":3,"file":"profile.password-9eb2qJZT.js","sources":["../../../app/routes/settings+/profile.password.tsx"],"sourcesContent":["import { getFormProps, getInputProps, useForm } from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport {\n\tjson,\n\tredirect,\n\ttype LoaderFunctionArgs,\n\ttype ActionFunctionArgs,\n} from '@remix-run/node'\nimport { Form, Link, useActionData } from '@remix-run/react'\nimport { z } from 'zod'\nimport { ErrorList, Field } from '#app/components/forms.tsx'\nimport { Button } from '#app/components/ui/button.tsx'\nimport { Icon } from '#app/components/ui/icon.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport {\n\tgetPasswordHash,\n\trequireUserId,\n\tverifyUserPassword,\n} from '#app/utils/auth.server.ts'\nimport { prisma } from '#app/utils/db.server.ts'\nimport { useIsPending } from '#app/utils/misc.tsx'\nimport { redirectWithToast } from '#app/utils/toast.server.ts'\nimport { PasswordSchema } from '#app/utils/user-validation.ts'\nimport { type BreadcrumbHandle } from './profile.tsx'\n\nexport const handle: BreadcrumbHandle & SEOHandle = {\n\tbreadcrumb: <Icon name=\"dots-horizontal\">Password</Icon>,\n\tgetSitemapEntries: () => null,\n}\n\nconst ChangePasswordForm = z\n\t.object({\n\t\tcurrentPassword: PasswordSchema,\n\t\tnewPassword: PasswordSchema,\n\t\tconfirmNewPassword: PasswordSchema,\n\t})\n\t.superRefine(({ confirmNewPassword, newPassword }, ctx) => {\n\t\tif (confirmNewPassword !== newPassword) {\n\t\t\tctx.addIssue({\n\t\t\t\tpath: ['confirmNewPassword'],\n\t\t\t\tcode: z.ZodIssueCode.custom,\n\t\t\t\tmessage: 'The passwords must match',\n\t\t\t})\n\t\t}\n\t})\n\nasync function requirePassword(userId: string) {\n\tconst password = await prisma.password.findUnique({\n\t\tselect: { userId: true },\n\t\twhere: { userId },\n\t})\n\tif (!password) {\n\t\tthrow redirect('/settings/profile/password/create')\n\t}\n}\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n\tconst userId = await requireUserId(request)\n\tawait requirePassword(userId)\n\treturn json({})\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n\tconst userId = await requireUserId(request)\n\tawait requirePassword(userId)\n\tconst formData = await request.formData()\n\tconst submission = await parseWithZod(formData, {\n\t\tasync: true,\n\t\tschema: ChangePasswordForm.superRefine(\n\t\t\tasync ({ currentPassword, newPassword }, ctx) => {\n\t\t\t\tif (currentPassword && newPassword) {\n\t\t\t\t\tconst user = await verifyUserPassword({ id: userId }, currentPassword)\n\t\t\t\t\tif (!user) {\n\t\t\t\t\t\tctx.addIssue({\n\t\t\t\t\t\t\tpath: ['currentPassword'],\n\t\t\t\t\t\t\tcode: z.ZodIssueCode.custom,\n\t\t\t\t\t\t\tmessage: 'Incorrect password.',\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t),\n\t})\n\tif (submission.status !== 'success') {\n\t\treturn json(\n\t\t\t{\n\t\t\t\tresult: submission.reply({\n\t\t\t\t\thideFields: ['currentPassword', 'newPassword', 'confirmNewPassword'],\n\t\t\t\t}),\n\t\t\t},\n\t\t\t{ status: submission.status === 'error' ? 400 : 200 },\n\t\t)\n\t}\n\n\tconst { newPassword } = submission.value\n\n\tawait prisma.user.update({\n\t\tselect: { username: true },\n\t\twhere: { id: userId },\n\t\tdata: {\n\t\t\tpassword: {\n\t\t\t\tupdate: {\n\t\t\t\t\thash: await getPasswordHash(newPassword),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\n\treturn redirectWithToast(\n\t\t`/settings/profile`,\n\t\t{\n\t\t\ttype: 'success',\n\t\t\ttitle: 'Password Changed',\n\t\t\tdescription: 'Your password has been changed.',\n\t\t},\n\t\t{ status: 302 },\n\t)\n}\n\nexport default function ChangePasswordRoute() {\n\tconst actionData = useActionData<typeof action>()\n\tconst isPending = useIsPending()\n\n\tconst [form, fields] = useForm({\n\t\tid: 'password-change-form',\n\t\tconstraint: getZodConstraint(ChangePasswordForm),\n\t\tlastResult: actionData?.result,\n\t\tonValidate({ formData }) {\n\t\t\treturn parseWithZod(formData, { schema: ChangePasswordForm })\n\t\t},\n\t\tshouldRevalidate: 'onBlur',\n\t})\n\n\treturn (\n\t\t<Form method=\"POST\" {...getFormProps(form)} className=\"mx-auto max-w-md\">\n\t\t\t<Field\n\t\t\t\tlabelProps={{ children: 'Current Password' }}\n\t\t\t\tinputProps={{\n\t\t\t\t\t...getInputProps(fields.currentPassword, { type: 'password' }),\n\t\t\t\t\tautoComplete: 'current-password',\n\t\t\t\t}}\n\t\t\t\terrors={fields.currentPassword.errors}\n\t\t\t/>\n\t\t\t<Field\n\t\t\t\tlabelProps={{ children: 'New Password' }}\n\t\t\t\tinputProps={{\n\t\t\t\t\t...getInputProps(fields.newPassword, { type: 'password' }),\n\t\t\t\t\tautoComplete: 'new-password',\n\t\t\t\t}}\n\t\t\t\terrors={fields.newPassword.errors}\n\t\t\t/>\n\t\t\t<Field\n\t\t\t\tlabelProps={{ children: 'Confirm New Password' }}\n\t\t\t\tinputProps={{\n\t\t\t\t\t...getInputProps(fields.confirmNewPassword, {\n\t\t\t\t\t\ttype: 'password',\n\t\t\t\t\t}),\n\t\t\t\t\tautoComplete: 'new-password',\n\t\t\t\t}}\n\t\t\t\terrors={fields.confirmNewPassword.errors}\n\t\t\t/>\n\t\t\t<ErrorList id={form.errorId} errors={form.errors} />\n\t\t\t<div className=\"grid w-full grid-cols-2 gap-6\">\n\t\t\t\t<Button variant=\"secondary\" asChild>\n\t\t\t\t\t<Link to=\"..\">Cancel</Link>\n\t\t\t\t</Button>\n\t\t\t\t<StatusButton\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tstatus={isPending ? 'pending' : form.status ?? 'idle'}\n\t\t\t\t>\n\t\t\t\t\tChange Password\n\t\t\t\t</StatusButton>\n\t\t\t</div>\n\t\t</Form>\n\t)\n}\n"],"names":["handle","breadcrumb","jsx","Icon","name","children","getSitemapEntries","ChangePasswordForm","z","object","currentPassword","PasswordSchema","newPassword","confirmNewPassword","superRefine","ctx","addIssue","path","code","ZodIssueCode","custom","message","ChangePasswordRoute","actionData","useActionData","isPending","useIsPending","form","fields","useForm","id","constraint","getZodConstraint","lastResult","result","onValidate","formData","parseWithZod","schema","shouldRevalidate","jsxs","Form","method","getFormProps","className","Field","labelProps","inputProps","getInputProps","type","autoComplete","errors","ErrorList","errorId","Button","variant","asChild","Link","to","StatusButton","status"],"mappings":"yrBA0BO,MAAMA,EAAuC,CACnDC,WAAYC,EAAA,IAACC,EAAK,CAAAC,KAAK,kBAAkBC,SAAQ,UAAA,CAAA,EACjDC,kBAAmBA,IAAM,IAC1B,EAEMC,EAAqBC,EACzBC,OAAO,CACPC,gBAAiBC,EACjBC,YAAaD,EACbE,mBAAoBF,CACrB,CAAC,EACAG,YAAY,CAAC,CAAED,mBAAAA,EAAoBD,YAAAA,CAAY,EAAGG,IAAQ,CACtDF,IAAuBD,GAC1BG,EAAIC,SAAS,CACZC,KAAM,CAAC,oBAAoB,EAC3BC,KAAMV,EAAEW,aAAaC,OACrBC,QAAS,0BACV,CAAC,CAEH,CAAC,EA2EF,SAAwBC,GAAsB,CAC7C,MAAMC,EAAaC,IACbC,EAAYC,IAEZ,CAACC,EAAMC,CAAM,EAAIC,EAAQ,CAC9BC,GAAI,uBACJC,WAAYC,EAAiBzB,CAAkB,EAC/C0B,WAAYV,GAAAA,YAAAA,EAAYW,OACxBC,WAAW,CAAEC,SAAAA,CAAS,EAAG,CACxB,OAAOC,EAAaD,EAAU,CAAEE,OAAQ/B,CAAmB,CAAC,CAC7D,EACAgC,iBAAkB,QACnB,CAAC,EAGA,OAAAC,EAAAA,KAACC,GAAKC,OAAO,OAAQ,GAAGC,EAAahB,CAAI,EAAGiB,UAAU,mBACrDvC,SAAA,CAAAH,EAAA,IAAC2C,EAAA,CACAC,WAAY,CAAEzC,SAAU,kBAAmB,EAC3C0C,WAAY,CACX,GAAGC,EAAcpB,EAAOlB,gBAAiB,CAAEuC,KAAM,UAAW,CAAC,EAC7DC,aAAc,kBACf,EACAC,OAAQvB,EAAOlB,gBAAgByC,MAAA,CAChC,EACAjD,EAAA,IAAC2C,EAAA,CACAC,WAAY,CAAEzC,SAAU,cAAe,EACvC0C,WAAY,CACX,GAAGC,EAAcpB,EAAOhB,YAAa,CAAEqC,KAAM,UAAW,CAAC,EACzDC,aAAc,cACf,EACAC,OAAQvB,EAAOhB,YAAYuC,MAAA,CAC5B,EACAjD,EAAA,IAAC2C,EAAA,CACAC,WAAY,CAAEzC,SAAU,sBAAuB,EAC/C0C,WAAY,CACX,GAAGC,EAAcpB,EAAOf,mBAAoB,CAC3CoC,KAAM,UACP,CAAC,EACDC,aAAc,cACf,EACAC,OAAQvB,EAAOf,mBAAmBsC,MAAA,CACnC,QACCC,EAAU,CAAAtB,GAAIH,EAAK0B,QAASF,OAAQxB,EAAKwB,MAAQ,CAAA,EAClDX,EAAA,KAAC,MAAI,CAAAI,UAAU,gCACdvC,SAAA,CAACH,EAAA,IAAAoD,EAAA,CAAOC,QAAQ,YAAYC,QAAO,GAClCnD,eAACoD,EAAK,CAAAC,GAAG,KAAKrD,SAAA,SAAM,CACrB,CAAA,EACAH,EAAA,IAACyD,EAAA,CACAV,KAAK,SACLW,OAAQnC,EAAY,UAAYE,EAAKiC,QAAU,OAC/CvD,SAAA,iBAAA,CAED,CAAA,CACD,CAAA,CAAA,CACD,CAAA,CAEF"}