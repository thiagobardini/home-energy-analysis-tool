{"version":3,"file":"constraint-BS8S8JXD.js","sources":["../../../node_modules/@conform-to/zod/constraint.mjs"],"sourcesContent":["import { objectSpread2 as _objectSpread2 } from './_virtual/_rollupPluginBabelHelpers.mjs';\n\nvar keys = ['required', 'minLength', 'maxLength', 'min', 'max', 'step', 'multiple', 'pattern'];\nfunction getZodConstraint(schema) {\n  function updateConstraint(schema, data) {\n    var _data$name;\n    var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    var constraint = name !== '' ? (_data$name = data[name]) !== null && _data$name !== void 0 ? _data$name : data[name] = {\n      required: true\n    } : {};\n    var def = schema['_def'];\n    if (def.typeName === 'ZodObject') {\n      for (var key in def.shape()) {\n        updateConstraint(def.shape()[key], data, name ? \"\".concat(name, \".\").concat(key) : key);\n      }\n    } else if (def.typeName === 'ZodEffects') {\n      updateConstraint(def.schema, data, name);\n    } else if (def.typeName === 'ZodPipeline') {\n      // FIXME: What to do with .pipe()?\n      updateConstraint(def.out, data, name);\n    } else if (def.typeName === 'ZodIntersection') {\n      var leftResult = {};\n      var rightResult = {};\n      updateConstraint(def.left, leftResult, name);\n      updateConstraint(def.right, rightResult, name);\n      Object.assign(data, leftResult, rightResult);\n    } else if (def.typeName === 'ZodUnion' || def.typeName === 'ZodDiscriminatedUnion') {\n      Object.assign(data, def.options.map(option => {\n        var result = {};\n        updateConstraint(option, result, name);\n        return result;\n      }).reduce((prev, next) => {\n        var list = new Set([...Object.keys(prev), ...Object.keys(next)]);\n        var result = {};\n        for (var _name of list) {\n          var prevConstraint = prev[_name];\n          var nextConstraint = next[_name];\n          if (prevConstraint && nextConstraint) {\n            var _constraint = {};\n            result[_name] = _constraint;\n            for (var _key of keys) {\n              if (typeof prevConstraint[_key] !== 'undefined' && typeof nextConstraint[_key] !== 'undefined' && prevConstraint[_key] === nextConstraint[_key]) {\n                // @ts-expect-error Both are on the same type\n                _constraint[_key] = prevConstraint[_key];\n              }\n            }\n          } else {\n            result[_name] = _objectSpread2(_objectSpread2(_objectSpread2({}, prevConstraint), nextConstraint), {}, {\n              required: false\n            });\n          }\n        }\n        return result;\n      }));\n    } else if (name === '') {\n      // All the cases below are not allowed on root\n      throw new Error('Unsupported schema');\n    } else if (def.typeName === 'ZodArray') {\n      constraint.multiple = true;\n      updateConstraint(def.type, data, \"\".concat(name, \"[]\"));\n    } else if (def.typeName === 'ZodString') {\n      var _schema = schema;\n      if (_schema.minLength !== null) {\n        var _schema$minLength;\n        constraint.minLength = (_schema$minLength = _schema.minLength) !== null && _schema$minLength !== void 0 ? _schema$minLength : undefined;\n      }\n      if (_schema.maxLength !== null) {\n        constraint.maxLength = _schema.maxLength;\n      }\n    } else if (def.typeName === 'ZodOptional') {\n      constraint.required = false;\n      updateConstraint(def.innerType, data, name);\n    } else if (def.typeName === 'ZodDefault') {\n      constraint.required = false;\n      updateConstraint(def.innerType, data, name);\n    } else if (def.typeName === 'ZodNumber') {\n      var _schema2 = schema;\n      if (_schema2.minValue !== null) {\n        constraint.min = _schema2.minValue;\n      }\n      if (_schema2.maxValue !== null) {\n        constraint.max = _schema2.maxValue;\n      }\n    } else if (def.typeName === 'ZodEnum') {\n      constraint.pattern = def.values.map(option =>\n      // To escape unsafe characters on regex\n      option.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d')).join('|');\n    } else if (def.typeName === 'ZodTuple') {\n      for (var i = 0; i < def.items.length; i++) {\n        updateConstraint(def.items[i], data, \"\".concat(name, \"[\").concat(i, \"]\"));\n      }\n    } else if (def.typeName === 'ZodLazy') ;\n  }\n  var result = {};\n  updateConstraint(schema, result);\n  return result;\n}\n\nexport { getZodConstraint };\n"],"names":["keys","getZodConstraint","schema","updateConstraint","data","_data$name","name","constraint","def","key","leftResult","rightResult","option","result","prev","next","list","_name","prevConstraint","nextConstraint","_constraint","_key","_objectSpread2","_schema","_schema$minLength","_schema2","i"],"mappings":"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","x_google_ignoreList":[0]}